encoding  utf-8

# Copyright (C) 2019 Xavier Robert <xavier.robert01@gmail.com>
# This work is under the Creative Commons Attribution-ShareAlike-NonCommecial License:
#	<http://creativecommons.org/licenses/by-nc-sa/4.0/> 

# File to set up specific settings for Therion drawing outputs
# In your *.thconfig file, you need to call this file with:
#    input <path/to/the/file/>config.thc
# and then, in each layout, you need to call the corresponding layout:
#    copy drawingconfig


# change the name for the legend
text en "line u:rope" "rope" #text to appear in legend
text fr "line u:rope" "corde" #text to appear in legend 
text es "line u:rope" "cuerda" #text to appear in legend 

text en "line u:fault" "fault" #text to appear in legend
text fr "line u:fault" "faille" #text to appear in legend
text es "line u:fault" "falla" #text to appear in legend  

text en "line u:strata" "strata" #text to appear in legend
text fr "line u:strata" "strate" #text to appear in legend
text es "line u:strata" "strata" #text to appear in legend

text en "line u:doline" "doline" #text to appear in legend
text fr "line u:doline" "doline" #text to appear in legend
text es "line u:doline" "dolina" #text to appear in legend

text en "point u:bat" "bat"
text fr "point u:bat" "chauve-souris"
text es "point u:bat" "murcielago"
text en "line u:bat" "bat path"
text fr "line u:bat" "passage de chauve-souris"
text es "line u:bat" "ruta de murcielagos"

text en "area u:bat" "lot of bats"
text fr "area u:bat" "beaucoup de chauve-souris"
text es "area u:bat" "muchos murcielagos"

text en "point u:guacharos" "guacharos"
text fr "point u:guacharos" "guacharos"
text es "point u:guacharos" "guacharos"

text fr "point u:danger" "danger !"
text en "point u:danger" "danger !"
text es "point u:danger" "danger !"

text en "point u:boss" "stalagmite boss"
text fr "point u:boss" "stalagmite boss"
text es "point u:boss" "stalagmite boss"

text fr "area u:guano" "guano"
text en "area u:guano" "guano"
text es "area u:guano" "guano"

text fr "area u:boue" "lac de boue"
text en "area u:boue" "mud lake"
text es "area u:boue" "lago de barro"

text es "line u:gour" "gour"
text fr "line u:gour" "barrage de gour"
text es "line u:gourstep" "gour-resalte"
text fr "line u:tubo" "tube de captage d'eau"
text es "line u:tubo" "tubo de captación de agua"
text fr "area u:sepultura" "sépultures"
text en "area u:sepultura" "sepultures"
text es "area u:sepultura" "sepulturas"
text es "line u:sepultura" "limite de sepulturas"


# Correction text espagnol
text es "point air-draught" "corriente de aire"
text es "line rock-border" "contorno de bloque"
text es "point water-flow" "curso de agua"
text es "line water-flow" "curso de agua"
text es "line rock-edge" "arista de bloque"
text es "point cave-pearl" "perlas de cavernas"
#text es "point gour-poza" "gour"

# Specific changes for Cueva de Quiocta, Peru
#text es "point u:boss" "lanzòn"
text es "point u:boss" "columnas/concretiones"
text es "line rock-border" "bloques"
text es "line flowstone" "macizo de concreciones"
text es "line u:construction" "construction"
text es "point height" "altura de resalte"
text es "point paleo-material" "restos arqueologicos"


  
layout drawingconfig
# Layout to draw the map and extended view.
  
	# Set the language
	#language fr
	language es
	# Auteur 
	doc-author "Xavier Robert"
	# Set the symology you want to use: UIS, ASF (Australie) CCNP (Etats Units) ou
	# SKB (tchecoslovakia) 
	#symbol-set UIS
	# Change the type or colors of symbols:
	symbol-assign point station:temporary SKBB
	symbol-color point water-flow [17 46 100]
	symbol-color point water [17 46 100]
	symbol-color line water-flow [17 46 100]
	symbol-color point ice [0 0 100]
	symbol-color line wall:ice [0 0 100]
	symbol-color point ice-pillar [0 0 100]
	symbol-color area ice [0 0 100]
	symbol-color point snow [0 0 100]
	symbol-color point spring [17 46 100]
	symbol-color point root [52 33 6]
	symbol-color point vegetable-debris [13 47 6]
	symbol-color point altitude [100 50 0]
	symbol-color point station [54 7 60]
	
	#symbol-color area guano [0 100 0]
	
####### Metapost-changes ############
  
code metapost

	% adjust step according to the length of the path; return at least two steps

	vardef adjust_step (expr len, s) =
		if s <= len/2: len / (floor(len / s))
		else: len/2 fi
	enddef;

	def mark_(expr p,t,l) =
		thdraw (point t of p) --
			((point t of p) + l * unitvector(thdir(p,t) rotated 90));
	enddef;

	vardef thdir (expr p,t) =    % 1 * epsilon caused problems in scales < 1:1000
    	                         % n * epsilon is enough for scale 1:(n*1000)
		if arclength(p)=0:
			hide(thwarning("unable to determine direction on zero-length path"))
			(0,1)
		else:
		%	((direction t-100*epsilon of p) + (direction t+100*epsilon of p)) / 2
		postcontrol (t+1000*epsilon) of p - precontrol (t-1000*epsilon) of p
		%	direction t of p
		fi
	enddef;


	# To add a doline line !
	def l_u_doline (expr P) =
		T:=identity;
		laenge:= arclength P;
		symsize:=adjust_step(laenge,2u);
		triangle_width:=symsize/10;
		cur:=(symsize-triangle_width)/2;
		pickup PenC;
		forever:
			t1 := arctime (cur) of P;
	 		t  := arctime (cur + triangle_width/2) of P;
			t2 := arctime (cur + triangle_width) of P;
			thfill (subpath (t1,t2) of P) -- 
				((point t of P) + symsize/2 * unitvector(thdir(P,t) rotated 90)) -- 
				cycle;
			thdraw (point t2 of P) --((point t of P) + symsize/2 * unitvector(thdir(P,t) rotated 90)) -- 
				(point t1 of P) withcolor (0.5, 0, 0);
			cur := cur + symsize;
			exitif cur > laenge - (1*symsize/3); % for rounding errors
			t1:=arctime (cur) of P;
		endfor;
	enddef;


	# to change blocs size	
	def a_blocks (expr p) =
		T:=identity;
		pickup PenC;
		path q, qq; q = bbox p;
		picture tmp_pic; 
		uu := max(u, (xpart urcorner q - xpart llcorner q)/100, (ypart urcorner q - ypart     llcorner q)/100);
		tmp_pic := image(
		for i = xpart llcorner q step 1.0uu until xpart urcorner q:
			for j = ypart llcorner q step 1.0uu until ypart urcorner q:
				qq := punked (((-.3uu,-.3uu)--(.3uu,-.3uu)--(.3uu,.3uu)--(-.3uu,.3uu)--cycle) 
				randomized (uu/2))
					rotated uniformdeviate(360)
					shifted ((i,j) randomized 1.0uu);
				if xpart (p intersectiontimes qq) < 0:
					thclean qq;
					thdraw qq;
				fi;
			endfor;  
		endfor;
		);
		clip tmp_pic to p;
		draw tmp_pic;
	enddef;
  
 	#  To change sand aspects
 	def a_sands (expr p) =
		T:=identity;
		pickup PenC;
		path q; q = bbox p;
		picture tmp_pic;
		tmp_pic := image(
		for i = xpart llcorner q step 0.1u until xpart urcorner q:
			for j = ypart llcorner q step 0.1u until ypart urcorner q:
				draw origin shifted ((i,j) randomized 0.1u) withpen PenC;
			endfor;
		endfor;
		);
		#clip tmp_pic to p;
		draw tmp_pic;
	enddef;
  
 	# To change pebbles aspects
 	def a_pebbles_SKBB (expr p) =
		T:=identity;
		pickup PenC;
		path q, qq; q = bbox p;
		picture tmp_pic; 
		tmp_pic := image(
		for i = xpart llcorner q step .1u until xpart urcorner q:
			for j = ypart llcorner q step .5u until ypart urcorner q:
				qq := (superellipse((.07u,0),(0,.03u), (-.07u,0),(0,.-.03u),.75))
				%randomized (u/25)
				rotated uniformdeviate(360) 
				shifted ((i,j) randomized 0.27u);
				if xpart (p intersectiontimes qq) < 0:
					thdraw qq;
				fi;
			endfor;  
		endfor;
		);
		clip tmp_pic to p;
		draw tmp_pic;
	enddef;
  
	 # To change slopes aspects
	def l_slope (expr P,S)(text Q) = 
		%show Q;
		T:=identity;
		numeric dirs[];
		numeric lengths[];
		for i=Q:
			dirs[redpart i]:=greenpart i;
			lengths[redpart i]:=bluepart i;
		endfor;  
		li:=length(P); % last
		alw_perpendicular:=true;
		for i=0 upto li:
		if unknown dirs[i]: dirs[i]:=-1; 
		else: 
			if dirs[i]>-1:
				dirs[i]:=((90-dirs[i]) - angle(thdir(P,i))) mod 360;
				alw_perpendicular:=false;
			fi;
		fi;
		if unknown lengths[i]: lengths[i]:=-1; fi;
		endfor;
		%for i=0 upto li: show dirs[i]; endfor;
		ni:=0; % next
		pi:=0; % previous
		for i=0 upto li:
			d:=dirs[i];
			if d=-1:
				if (i=0) or (i=li):
					dirs[i] := angle(thdir(P,i) rotated 90) mod 360;
					pi:=i;
				else:
					if ni<=i:
						for j=i upto li:
							ni:=j;
							exitif dirs[j]>-1;
						endfor;
					fi;
					w:=arclength(subpath(pi,i) of P) / 
					arclength(subpath(pi,ni) of P);
					dirs[i]:=w[dirs[pi],dirs[ni]];
					%if (dirs[i]-angle(thdir(P,i))) mod 360>180:
					%dirs[i]:=w[dirs[ni],dirs[pi]];
					%message("*******");
					%fi;
				fi;
			else:
				pi:=i;
			fi;
		endfor;
		%for i=0 upto li: show dirs[i]; endfor;
		ni:=0; % next
		pi:=0; % previous
		for i=0 upto li:
			l:=lengths[i];
			if l=-1:
				if (i=0) or (i=li):
					lengths[i] := 1cm; % should never happen!
					thwarning("slope width at the end point not specified");
					pi:=i;
				else:
					if ni<=i:
						for j=i+1 upto li:
							ni:=j;
							exitif lengths[j]>-1;
						endfor;  
					fi;
					w:=arclength(subpath(pi,i) of P) /   
					arclength(subpath(pi,ni) of P);
					lengths[i]:=w[lengths[pi],lengths[ni]];
					pi:=i;
				fi;
			else:
				pi:=i;
			fi;
		endfor;
		%for i=0 upto li: show lengths[i]; endfor;
		T:=identity;
		boolean par;
		cas := 0.3u;
		krok := 0.7u;
		dlzka := (arclength P);
		if dlzka>3u: dlzka:=dlzka-0.6u fi;
		mojkrok:=adjust_step(dlzka,1.4u) / 5;
		pickup PenD;
		par := false;
		forever:
			t := arctime cas of P;
			if t mod 1>0:  % not a key point
				w := (arclength(subpath(floor t,t) of P) / 
				arclength(subpath(floor t,ceiling t) of P));
				if alw_perpendicular:
					a := 90;
				else:
					a := w[dirs[floor t],dirs[ceiling t]];
				fi;
				l := w[lengths[floor t],lengths[ceiling t]];
			else:
				if alw_perpendicular:
					a := 90;
				else:
					a:= dirs[t];
				fi; 
				l:=lengths[t];
			fi;    
			a := a + angle(thdir(P,t));    
			thdraw (point t of P) -- 
			((point t of P) + if par: 0.333 * fi l * unitvector(dir(a)));
			cas := cas + mojkrok;
			par := not par;
			exitif cas > dlzka + .3u + (krok / 3);  % for rounding errors
		endfor;
		if S = 1: pickup PenC; draw P fi;
			%pickup pencircle scaled 3pt;
			%for i=0 upto li: draw point i of P; endfor;
	enddef; 

	# To change color of Boue
	def a_u_boue (expr p) =
		T:=identity;
		#thfill p withcolor (0.22, 0.22, 0.95);
		#126, 51, 0
		thfill p withcolor (0.49, 0.20, 0.00);
	enddef;
	
	# To change color of Sump
	def a_sump (expr p) =
		T:=identity;
		#thfill p withcolor (0.22, 0.22, 0.95);
		thfill p withcolor (0.06, 0.20, 0.65);
	enddef;
	
	# To change color of guano
	def a_u_guano (expr p) =
		T:=identity;
		thfill p withcolor (0.53, 0.26, 0.11);
	enddef;
  
	# To change color of Water area    
	def a_water (expr p) =
		T:=identity;
		#thfill p withcolor (0.60, 0.8, 1);
		thfill p withcolor (0.17, 0.46, 1);
	enddef;
  
	# Northarrow more funnier !
	def s_northarrow (expr rot) =
		begingroup
			interim defaultscale:=0.7; % scale your north arrow here
			T:=identity scaled defaultscale rotated -rot;
			interim linecap:=squared;
			interim linejoin:=rounded;
			thfill (-.5cm,-.1cm)--(0,2.5cm)--(.5cm,-.1cm)--cycle;
			pickup pencircle scaled (0.08cm * defaultscale);
			thdraw (0,0)--(0,-2.5cm);
			pickup pencircle scaled (0.16cm * defaultscale);
			p:=(0.4cm,0.6cm);
			thdraw ((p--(p yscaled -1)--(p xscaled -1)--(p scaled -1)) shifted (0,-1.0cm));
			label.rt(thTEX("mg") scaled 1.6, (.6cm,-1.6cm)) transformed T;
		endgroup;
	enddef; 
    
  
 	# Change Scale bar type
	def s_scalebar (expr l, units, txt) =
		begingroup
			interim warningcheck:=0;
			tmpl:=l / Scale * cm * units / 2;
			tmpx:=l / Scale * cm * units / 5;
			tmph:=5bp; % bar height
		endgroup;
		pickup PenC;
		draw (-tmpl,0)--(tmpl,0)--(tmpl,-tmph)--(-tmpl,-tmph)--cycle;
		p:=(0,0)--(tmpx,0)--(tmpx,-tmph)--(0,-tmph)--cycle;
		for i:=-2.5 step 2 until 2:
			fill p shifted (i * tmpx,0);
		endfor;
		begingroup
			interim labeloffset:=3.5bp;
			for i:=0 step (l/5) until (l-1):
				tmpx:=tmpl * (i * 2 / l - 1);
				label.bot(thTEX(decimal (i)),(tmpx,-tmph));
			endfor;
			label.bot(thTEX(decimal (l) & "\thinspace" & txt),(tmpl,-tmph));
			% To write the scale "1:scale"; Comment it ?
			%label.top(thTEX("Echelle 1 : " & decimal (Scale*100)),(0,0));
		endgroup;
	enddef; 
	
	
	# Write the point depth
	def p_u_prof (expr pos) =
		T:=identity shifted pos;
		pickup PenD;
		p:=(-.3u,0)--(.3u,0);
		thdraw p; thdraw p rotated 90;
		p:=fullcircle scaled .2u;
		thclean p; thdraw p;
	enddef;
	vardef p_label@#(expr txt,pos,rot,mode) =
		if mode=1:
			thdrawoptions(withcolor .8red + .4blue);
			p_u_prof(pos);
			% append "m" to label
			picture txtm;
			% calcul profondeur
			%numeric profondeur;
			profondeur:=(\thaltitude-\cavemaxz);
			picture txtprofondeur;
			txtm:=image(
				draw txt;
				interim labeloffset:=0;
				label.urt(btex \thaltitude m etex, lrcorner txt);
				%label.urt(btex \thdepth m etex, lrcorner txt);
			);
			% give extra offset in case of l/r/t/b alignment
			pair ctmp;
			ctmp:=center thelabel@#("x", (0,0));
			if (xpart ctmp * ypart ctmp)=0:
				interim labeloffset:=(.4u);
			else: % diagonal alignment
				interim labeloffset:=(.2u);
			fi;
			% draw label
			lab:=thelabel@#(txtm, pos);
			draw lab _thop_; % use color
			thdrawoptions();
			bboxmargin:=0.8bp;
			write_circ_bbox((bbox lab) smoothed 2);
		else:
			if mode=7: interim labeloffset:=(u/8) fi;
			lab:=thelabel@#(txt, pos);
			if mode>1: pickup PenD fi;
			if mode=2: process_uplabel;
			elseif mode=3: process_downlabel;
			elseif mode=4: process_updownlabel;
			elseif mode=5: process_circledlabel;
			elseif mode=6: process_boxedlabel;
			elseif mode=7: process_label(pos,rot);  % station name
			elseif mode=8: process_filledlabel(pos, rot);
			else: process_label(pos,rot); fi;
    	fi;
  	enddef;
	
	
	
	# Change the altitude definition
	#     This label requires to specify the position of text relative to point with 
	#     help of -align in the options box. 
	#     ex: -align bottom-right/top-left/top-right/bottom-left/top/bottom/left/right...
	def p_altitude (expr pos) =
		T:=identity shifted pos;
		pickup PenD;
		p:=(-.3u,0)--(.3u,0);
		thdraw p; thdraw p rotated 90;
		p:=fullcircle scaled .2u;
		thclean p; thdraw p;
	enddef;
	vardef p_label@#(expr txt,pos,rot,mode) =
		if mode=1:
			thdrawoptions(withcolor .8red + .4blue);
			p_altitude(pos);
			% append "m" to label
			picture txtm;
			txtm:=image(
				draw txt;
				interim labeloffset:=0;
				label.urt(btex \thaltitude  m etex, lrcorner txt);
				#label.urt(btex \thheight m etex, lrcorner txt);
			);
			% give extra offset in case of l/r/t/b alignment
			pair ctmp;
			ctmp:=center thelabel@#("x", (0,0));
			if (xpart ctmp * ypart ctmp)=0:
				interim labeloffset:=(.4u);
			else: % diagonal alignment
				interim labeloffset:=(.2u);
			fi;
			% draw label
			lab:=thelabel@#(txtm, pos);
			draw lab _thop_; % use color
			thdrawoptions();
			bboxmargin:=0.8bp;
			write_circ_bbox((bbox lab) smoothed 2);
		else:
			if mode=7: interim labeloffset:=(u/8) fi;
			lab:=thelabel@#(txt, pos);
			if mode>1: pickup PenD fi;
			if mode=2: process_uplabel;
			elseif mode=3: process_downlabel;
			elseif mode=4: process_updownlabel;
			elseif mode=5: process_circledlabel;
			elseif mode=6: process_boxedlabel;
			elseif mode=7: process_label(pos,rot);  % station name
			elseif mode=8: process_filledlabel(pos, rot);
			else: process_label(pos,rot); fi;
    	fi;
  	enddef;
  
  # For point height with P or C prefixe 
  # use “point 0 0 height -value [+10 m]” 
  # or “point 0 0 height -value [-85 m]” 
  # in your data to get E10 or P85
     verbatimtex \def\thheightpos{E}\def\thheightneg{P} etex 

  # definition of new lines/symbols
	
	#    Line symbol for strata for cross sections. It works exactly as line section 
	#    symbol but you should use -clip off option:
	def l_u_strata (expr P) =
		T:=identity;
		path Q; Q = punked P;
		for t = 0 upto length P - 1:
			pair zz[];
			zz1 := point t of P;
			zz2 := point t+1 of P;
			zz3 := postcontrol t of P;
			zz4 := precontrol t+1 of P;
			linecap:=0;
			if (length(zz3-1/3[zz1,zz2]) > 0.1pt) or (length(zz4-2/3[zz1,zz2]) > 0.1pt):
				zz5 = whatever[zz1,zz2];
				(zz3-zz5) = whatever * (zz1-zz2) rotated 90;
				pickup pencircle scaled 1 mm;
				draw zz1--zz5 dashed evenly;
				pickup PenA;
				draw zz1--zz5 withcolor background;
				zz6 = whatever[zz1,zz2];
				(zz4-zz6) = whatever * (zz1-zz2) rotated 90;
				pickup pencircle scaled 1 mm;
				draw zz2--zz6 dashed evenly;
				pickup PenA;
				draw zz2--zz6 withcolor background;
			else:
				pickup pencircle scaled 1 mm;
				draw zz1--zz2 dashed evenly;
				pickup PenA;
				draw zz1--zz2 withcolor background;
			fi;
		endfor;
	enddef;

	# Line symbol for fault. It works exactly as line section symbol but you should use -clip off option:
	def l_u_fault (expr P) =
		T:=identity;
		path Q; Q = punked P;
		pickup PenA;
		for t = 0 upto length P - 1:
			pair zz[];
			zz1 := point t of P;
			zz2 := point t+1 of P;
			zz3 := postcontrol t of P;
			zz4 := precontrol t+1 of P;
			if (length(zz3-1/3[zz1,zz2]) > 0.1pt) or (length(zz4-2/3[zz1,zz2]) > 0.1pt):
				zz5 = whatever[zz1,zz2];
				(zz3-zz5) = whatever * (zz1-zz2) rotated 90;
				draw zz1--zz5 dashed evenly;
				zz6 = whatever[zz1,zz2];
				(zz4-zz6) = whatever * (zz1-zz2) rotated 90;
				draw zz2--zz6 dashed evenly;
			else:
				draw zz1--zz2 dashed evenly;
			fi;
		endfor;
	enddef;

	# code to define a doline
	def l_u_doline (expr P) =
		T:=identity;
		laenge:= arclength P;
		symsize:=adjust_step(laenge,2u);
		triangle_width:=symsize/10;
		cur:=(symsize-triangle_width)/2;
		pickup PenC;
		forever:
			t1 := arctime (cur) of P;
			t  := arctime (cur + triangle_width/2) of P;
			t2 := arctime (cur + triangle_width) of P;
			thfill (subpath (t1,t2) of P) -- 
			((point t of P) + symsize/2 * unitvector(thdir(P,t) rotated 90)) -- 
			cycle;
			thdraw (point t2 of P) --((point t of P) + symsize/2 * unitvector(thdir(P,t) rotated 90)) -- 
			(point t1 of P) withcolor (0.5, 0, 0);
			cur := cur + symsize;
			exitif cur > laenge - (1*symsize/3); % for rounding errors
			t1:=arctime (cur) of P;
		endfor;
	enddef;

	# Modifier l aspect et les données des statistiques de longueur affichees
	#code tex-map
	#	\cavelength{1330\thinspace{}m} 
	#	+ 150\thinspace{}m estimes}
	#	\cavedepth{243\thinspace{}m}
	
	# Définit le gradient comme pendage géologique
	def p_gradient_XA (expr P,R,S,A) =
		U:=(.15u, .4u);    
		T:=identity aligned A rotated R scaled S shifted P;
		pickup PenC;
		thdraw (0u, 0u) -- (0u, .4u);
		thdraw (-.4u, 0u) -- (.4u, 0u); 
	enddef;
	initsymbol ("p_gradient_XA");
	symbol-assign point gradient XA
	
	
	#Definition of the bat symbol
	def p_u_bat(expr pos, theta, sc, al) =
		T := identity shifted pos;
		thfill (bat_path scaled 2.0) withcolor black;
	enddef;
	
#	
#	Definition of the line bat symbol
#	def l_u_bat(expr P) =
#		T:=identity;
#		cas := 0;
#		dlzka := arclength P;
#		mojkrok:=adjust_step(dlzka, 1.0u);
#		pickup PenD;
#		forever:
#			t := arctime cas of P;
#			thfill bat_path scaled 0.5 shifted (point t of P) withcolor black;
#			cas := cas + mojkrok;
#			exitif cas > dlzka + (mojkrok / 3); % for rounding errors
#		endfor;
#	enddef;	
#	
#	For the area bu symbol
#	% bat pattern
#	beginpattern(pattern_bat);
#		fill bat_path withcolor black;
#	endpattern;
#	% bat area symbol
#	def a_u_bat (expr Path) =
#		T:=identity;
#		thclean Path;
#		thfill Path withpattern pattern_bat;
#	enddef;
#	
#	def l_u_bat_legend =
#		l_u_bat(((.2,.2) -- (.8,.8)) inscale)
#	enddef;

	# Definition of a stalagmite boss symbol
	def p_u_boss (expr pos,theta,sc,al)=
		T:=identity aligned al rotated theta scaled sc shifted pos;
		pickup PenD;
		p := (0.08u,0.25u)..(0,0.29u)..(-0.08u,0.25u);
		q := (0.16u,0.5u)..(0u,0.58u)..(-0.16u,0.5u);
		for i=0 upto 9:
			thdraw p rotated 36i;
			thdraw q rotated 36i;
		endfor
		p := fullcircle scaled 0.15u; 
		thdraw p;
	enddef;

	# Define Danger symbol
	def p_u_danger (expr P,R,S,A)=
       T:=identity aligned A rotated R scaled S shifted P;
       thfill (0,-u)--(u,0)--(0,u)--(0,.9u)--(.9u,0)--(0,-.9u)--cycle;
       thfill (0,-u)--(-u,0)--(0,u)--(0,.9u)--(-.9u,0)--(0,-.9u)--cycle;
       thfill (.1u,-.45u)..(0,-.35u)..(-.1u,-.45u)..(0,-.55u)..cycle;
       thfill (0,-.2u)..(.1u,-.1u)--(.2u,.4u)..(0,.6u)..(-.2u,.4u)--(-.1u,-.1u)..cycle;
     enddef;
     #initsymbol("p_entrance_MY");
     #let p_entrance = p_entrance_MY;
     
    # Define line Gour barrage
	def l_u_construction (expr Path) =
		T:=identity;
		pickup PenC;
		draw Path withcolor (0.49, 0.20, 0.00);
	enddef;

	# Define line Gour barrage
	def l_u_gour (expr Path) =
		T:=identity;
		pickup PenC;
		draw Path withcolor (0.49, 0.20, 0.00);
	enddef;
	
	# Define line Gour Step
	def l_u_gourstep (expr P) =
		T:=identity;
		cas := 0;
		dlzka := arclength P;
		#mojkrok:=adjust_step(dlzka, 0.25u);
		mojkrok:=adjust_step(dlzka, 0.10u);
		pickup PenD;  
		forever:
			t := arctime cas of P;
			mark_ (P,t,0.1u);
			cas := cas + mojkrok;
			exitif cas > dlzka + (mojkrok / 3); % for rounding errors
		endfor;
		pickup PenC;  
		thdraw P withcolor (0.49, 0.20, 0.00);
	enddef;
	
	# Definition of archeological areas
	beginpattern(pattern_archeo);
		draw origin--10up withpen pensquare scaled (0.02u);
		%patternxstep(.18u);
		patternxstep(.28u);
		patterntransform(identity rotated 45);
	endpattern;
	def a_u_sepultura (expr Path) =
		T:=identity;
		thclean Path;
		thfill Path withpattern pattern_archeo;
	enddef;
	# Define line sepultures
	def l_u_sepultura (expr Path) =
		T:=identity;
		pickup PenD;
		#103, 113, 121 /255
		draw Path withcolor (0.40, 0.44, 0.47);
	enddef;
	
	# definition of a man-made tube
	def l_u_tubo (expr Path) =
		T:=identity;
		cas := 0;
		dlzka := arclength Path;
		mojkrok:=adjust_step(dlzka, 2.0u);
		pickup PenA;  
		forever:
			t := arctime cas of Path;
			mark_ (Path,t,0.1u);
			mark_ (Path,t,-0.1u);
			cas := cas + mojkrok;
			exitif cas > dlzka + (mojkrok / 3); % for rounding errors
		endfor;
		pickup PenA;
		#draw Path withcolor (0.06, 0.002, 0.42);
		draw Path withcolor (0.40, 0.44, 0.47);
	enddef;

endcode
  
endlayout 

#------------------------------
layout headerl
# Layout to change the header
	#This code is experimental redefinition of map header
	#Bruce Mutton           Therion 5.3.15 make use of new variables
 
	#this one affects maps only
	code tex-map
		% start bruces addition
		# english:
		#\newtoks\thversiontitleA \thversiontitleA={Compiled}
		# Français ou espagnol:
		\newtoks\thversiontitleA \thversiontitleA={Compilation}
		\newtoks\thversiontitleB \thversiontitleB={Therion }
		\newtoks\datetitle \datetitle={on }
		\newtoks\thclub \thclub={Club(s)}
		# To change the clubs
		#\newtoks\club \club={Espeleo Club Andino (ECA), Groupe Spéléologique de Bagnols Marcoule (GSBM), Groupe Spéléologique Vulcain}
		\newtoks\depthrangetitle \depthrangetitle={Depth range from }
		
		% end bruces addition
 
		\legendcontent={%
			\hsize=\legendwidth
			\color[0 0 0]\the\legendtextcolor
			\ifnortharrow\vbox to 0pt{\line{\hfil\northarrow}\vss}\fi
			%print cave map name
			\edef\tmp{\the\cavename} \ifx\tmp\empty \else
				{\the\legendtextheadersize\the\cavename}\vskip0.5cm
			\fi
			%print comment
			{\rightskip=0pt plus 3em\parskip=3bp
			\edef\tmp{\the\comment} \ifx\tmp\empty \else
				{\the\legendtextsize\the\comment} \par\medskip\vskip1cm
			\fi}
			%print scalebar 
			\ifscalebar\scalebar\vskip1cm\fi
 
		% start bruces addition
		# %    CS
		\edef\tmp{\the\outcsname} \ifx\tmp\empty \else
			{\the\legendtextsize\ss\the\outcsname\par}
		\fi
		\edef\tmp{\the\northdir} \ifx\tmp\empty \else
			{\the\legendtextsize\ss\the\northdir north }
		\fi     
		\edef\tmp{\the\magdecl} \ifx\tmp\empty \else
			{\the\legendtextsize\ss\the\magdecl deg \par}
		\fi
		\vskip0.5cm       
		% end bruces addition   
		#%print comment
		{
		#\rightskip=0pt plus 3em\parskip=3bp
		#\edef\tmp{\the\comment} \ifx\tmp\empty \else
		#	{\the\legendtextsize\the\comment} \par\medskip
		#\fi
		%print cavelength and depth
		\everypar{\hangindent=2em\hangafter=1}
		\edef\tmp{\the\cavelength} \ifx\tmp\empty \else
			{\the\legendtextsize\si\the\cavelengthtitle: \ss\the\cavelength\par}
		\fi
		\edef\tmp{\the\cavedepth} \ifx\tmp\empty \else
			{\the\legendtextsize\si\the\cavedepthtitle: \ss\the\cavedepth\par}
		\fi
		# % start bruces addition           
		## %      altitude
		#\edef\tmp{\the\cavemaxz} \ifx\tmp\empty \else
		#	{\the\legendtextsize\si\the\depthrangetitle \ss\the\cavemaxz m to}
		#\fi
		#\edef\tmp{\the\caveminz} \ifx\tmp\empty \else
		#	{\the\legendtextsize\ss\the\caveminz m \par} %above mean sea level
		#\fi
		# % end bruces addition
 
		%print explorers names
		\edef\tmp{\the\exploteam} \ifx\tmp\empty \else
			{\the\legendtextsize\si\the\explotitle: \ss\the\exploteam\quad\si\the\explodate\par}
		\fi
		%print surveyors names
		\edef\tmp{\the\topoteam} \ifx\tmp\empty \else
			{\the\legendtextsize\si\the\topotitle: \ss\the\topoteam\quad\si\the\topodate\par}
		\fi
		%print cartographers names
		\edef\tmp{\the\cartoteam} \ifx\tmp\empty \else
			{\the\legendtextsize\si\the\cartotitle: \ss\the\cartoteam\quad\si\the\cartodate\par}
		\fi
		\edef\tmp{\the\club} \ifx\tmp\empty \else  %only write version and date if version is not emplty
			{\the\legendtextsize\si\the\thclub: \ss\the\club\par}
		# % start bruces addition (compilation version and date modified to use built-in 5.3.15 variables)
		\edef\tmp{\the\thversion} \ifx\tmp\empty \else  %only write version and date if version is not emplty
			{\the\legendtextsize\si\the\thversiontitleA: \ss\the\thversiontitleB \ss\the\thversion}
		% \fi
		% \edef\tmp{\the\currentdate} \ifx\tmp\empty \else
			{\the\legendtextsize\si\the\datetitle \ss\the\currentdate\par}
		\fi     
           
		# % end bruces addition
		%print copyrights
		\edef\tmp{\the\copyrights} \ifx\tmp\empty \else
			{\the\legendtextsize\ss\the\copyrights\par}
		\fi     
		}
		\formattedlegend
		\color[0 0 0]
		}
 
	endcode
endlayout

#------------------------------
layout header_coupe
# Layout to change the header
	#This code is experimental redefinition of map header
	#Bruce Mutton           Therion 5.3.15 make use of new variables
 
	#this one affects maps only
	code tex-map
		% start bruces addition
		# english:
		#\newtoks\thversiontitleA \thversiontitleA={Compiled}
		# Français ou espagnol:
		\newtoks\thversiontitleA \thversiontitleA={Compilation}
		\newtoks\thversiontitleB \thversiontitleB={Therion }
		\newtoks\datetitle \datetitle={on }
		\newtoks\thclub \thclub={Club(s)}
		
		% end bruces addition
 
		\legendcontent={%
			\hsize=\legendwidth
			\color[0 0 0]\the\legendtextcolor
			\ifnortharrow\vbox to 0pt{\line{\hfil\northarrow}\vss}\fi
			%print cave map name
			\edef\tmp{\the\cavename} \ifx\tmp\empty \else
				{\the\legendtextheadersize\the\cavename}\vskip0.5cm
			\fi
			%print comment
			{\rightskip=0pt plus 3em\parskip=3bp
			\edef\tmp{\the\comment} \ifx\tmp\empty \else
				{\the\legendtextsize\the\comment} \par\medskip\vskip1cm
			\fi}
			%print scalebar 
			\ifscalebar\scalebar\vskip1cm\fi
			   
		{
		%print cavelength and depth
		\everypar{\hangindent=2em\hangafter=1}
		\edef\tmp{\the\cavelength} \ifx\tmp\empty \else
			{\the\legendtextsize\si\the\cavelengthtitle: \ss\the\cavelength\par}
		\fi
		\edef\tmp{\the\cavedepth} \ifx\tmp\empty \else
			{\the\legendtextsize\si\the\cavedepthtitle: \ss\the\cavedepth\par}
		\fi
		# % end bruces addition
 
		%print explorers names
		\edef\tmp{\the\exploteam} \ifx\tmp\empty \else
			{\the\legendtextsize\si\the\explotitle: \ss\the\exploteam\quad\si\the\explodate\par}
		\fi
		%print surveyors names
		\edef\tmp{\the\topoteam} \ifx\tmp\empty \else
			{\the\legendtextsize\si\the\topotitle: \ss\the\topoteam\quad\si\the\topodate\par}
		\fi
		%print cartographers names
		\edef\tmp{\the\cartoteam} \ifx\tmp\empty \else
			{\the\legendtextsize\si\the\cartotitle: \ss\the\cartoteam\quad\si\the\cartodate\par}
		\fi
		%print the clubs
		\edef\tmp{\the\club} \ifx\tmp\empty \else  %only write version and date if version is not emplty
			{\the\legendtextsize\si\the\thclub: \ss\the\club\par}
		# % start bruces addition (compilation version and date modified to use built-in 5.3.15 variables)
		\edef\tmp{\the\thversion} \ifx\tmp\empty \else  %only write version and date if version is not emplty
			{\the\legendtextsize\si\the\thversiontitleA: \ss\the\thversiontitleB \ss\the\thversion}
		% \fi
		% \edef\tmp{\the\currentdate} \ifx\tmp\empty \else
			{\the\legendtextsize\si\the\datetitle \ss\the\currentdate\par}
		\fi     
           
		# % end bruces addition
		%print copyrights
		\edef\tmp{\the\copyrights} \ifx\tmp\empty \else
			{\the\legendtextsize\ss\the\copyrights\par}
		\fi     
		}
		\formattedlegend
		\color[0 0 0]
		}
	endcode
endlayout


#------------------------------
layout layoutmapborder  
# If you want to draw a frame around the map
	code tex-map
		\framethickness=0.5mm
endlayout



#CODE TO CUSTOMISE ATLAS OUTPUT
#------------------------------
layout LayoutAtlasNorthArrow
#This code is a redefinition of the default atlas definition
#that includes both north arrow & scale bar beside the navigation pane

code tex-atlas
	\def\dopage{%
		\vbox{\centerline{\framed{\mapbox}}
			\bigskip
			\line{%
				\vbox to \ht\navbox{
					\hbox{\size[20]\the\pagelabel
					\ifpagenumbering\space(\the\pagenum)\fi
					\space\size[16]\the\pagename}
					\ifpagenumbering
						\medskip
						\hbox{\qquad\qquad
							\vtop{%
								\hbox to 0pt{\hss\showpointer\pointerN\hss}
								\hbox to 0pt{\llap{\showpointer\pointerW\hskip0.7em}%
								\raise1pt\hbox to 0pt{\hss$\updownarrow$\hss}%
								\raise1pt\hbox to 0pt{\hss$\leftrightarrow$\hss}%
								\rlap{\hskip0.7em\showpointer\pointerE}}
								\hbox to 0pt{\hss\showpointer\pointerS\hss}
							}\qquad\qquad
							\vtop{
								\def\arr{$\uparrow$}
								\showpointerlist\pointerU
								\def\arr{$\downarrow$}
								\showpointerlist\pointerD
							}
						}
					\fi
					\vss
				}
				\hss
				\vbox to \ht\navbox{
					\ifnortharrow\hbox to 0pt{\hss\northarrow\qquad}\fi
					\vss
					\ifscalebar\hbox to 0pt{\hss\scalebar\qquad}\fi
				}
				\box\navbox
			}
		}
	}

endlayout LayoutAtlasNorthArrow

#------------------------------
layout layoutcontinuation  
	# If you want to write all the continuations
	code metapost
		def p_continuation(expr pos,theta,sc,al) =
			% draw default continuation symbol
			p_continuation_UIS(pos,theta,sc,al);
			% if text attribute is set
			if known(ATTR__text) and picture(ATTR__text):
				% set labeling color to light orange
				push_label_fill_color(1.0, 0.9, 0.8);
				% draw filled label with text next to ?
				p_label.urt(ATTR__text,(.5u,-.25u) transformed T,0.0,8);
				% restore original labeling color
				pop_label_fill_color;
			fi;
		enddef;
	endcode
endlayout layoutcontinuation

#------------------------------
layout northarrowMG

	code metapost
	  	# If you want to get both, magnetic and geographic north,
  		# with \cartodate ?
		def s_northarrow (expr rot) =
			%valscal=1.2; % scale your north arrow here
			valscal=0.7; % scale your north arrow here
			decl:=MagDecl; % set the magnetic declination
			T:=identity;
			picture tmp_pic;
			tmp_pic = image (
				pickup pencircle scaled .3;
				thfill fullcircle scaled 4cm withcolor 1white;
				thdraw fullcircle scaled 3.1cm;
				thdraw fullcircle scaled 4.05cm;
				pickup pencircle scaled .1;
				thdraw fullcircle scaled 3cm;
				thdraw fullcircle scaled 4cm;
				pickup pencircle scaled .2;
				thdraw (dir(45)*2.025cm)--(dir(45)*3.7cm);
				thdraw (dir(135)*2.025cm)--(dir(135)*3.7cm);
				thdraw (dir(225)*2.025cm)--(dir(225)*3.7cm);
				thdraw (dir(315)*2.025cm)--(dir(315)*3.7cm);
				pickup pencircle scaled .1;
				for whereto=0 step 15 until 345:
					thdraw dir(whereto)*.65cm--dir(whereto)*.9cm;
					thdraw dir(whereto)*1.4cm--dir(whereto)*1.5cm;
				endfor;
				for whereto=0 step 5 until 355:
					thdraw dir(whereto)*.65cm--dir(whereto)*.8cm;
					thdraw dir(whereto)*1.45cm--dir(whereto)*1.5cm;
				endfor; 
				for whereto=0 step 1 until 359:
					thdraw dir(whereto)*1.94cm--dir(whereto)*2cm;
				endfor; 
				pickup pencircle scaled 1;
				thdraw fullcircle scaled 1cm;
				thdraw fullcircle scaled 1.1cm;
				thdraw fullcircle scaled 1.3cm withpen pencircle scaled .3;
				vald=90-decl;
				texrot=0-decl;
				drawarrow(dir(vald)*-2cm--dir(vald)*2cm) withpen pencircle scaled .2;
				% Add the date of the last drawing
				thdraw image(label.top(btex $mg$ etex, (0,0)) scaled .5 rotated texrot;) shifted (dir(vald)*2.04cm);			
				thfill (1.06cm,1.06cm)--(0,.2cm)--(-1.06cm,1.06cm)--(-.2cm,0)--(-1.06cm,-1.06cm)--(0,-.2cm)--(1.06cm,-1.06cm)--(.2cm,0)--cycle;
				thfill (-.2cm,.2cm)--(0,2cm)--(0,0)--cycle;
				thfill (.2cm,-.2cm)--(0,-2cm)--(0,0)--cycle;
				thfill (.2cm,.2cm)--(2cm,0)--(0,0)--cycle;
				thfill (-.2cm,-.2cm)--(-2cm,0)--(0,0)--cycle;
				thfill (.2cm,.2cm)--(-0,2cm)--(0,0)--cycle withcolor 1white;
				thfill (.2cm,-.2cm)--(2cm,0)--(0,0)--cycle withcolor 1white;
				thfill (-.2cm,-.2cm)--(0,-2cm)--(0,0)--cycle withcolor 1white;
				thfill (-.2cm,.2cm)--(-2cm,0)--(0,0)--cycle withcolor 1white;			
				pickup pencircle scaled .2;
				thdraw (-.2cm,.2cm)--(0,2cm)--(.2cm,.2cm)--(2cm,0cm)--(.2cm,-.2cm)--(0,-2cm)--(-.2cm,-.2cm)--(-2cm,0)--cycle;
				thfill fullcircle scaled .56cm withcolor 1white;
				pickup pencircle scaled .1;
				thdraw (.28cm,0)..(0,.28cm)..(-.28cm,0)..(0,-.28cm)..cycle;
				pickup pencircle scaled .4;
				thdraw (.2cm,0)..(0,.2cm)..(-.2cm,0)..(0,-.2cm)..cycle;
				label.bot(btex $N$ etex, (0,2.6cm));
				label.lft(btex $E$ etex, (2.6cm,0));
				label.rt(btex $W$ etex, (-2.6cm,0));
				label.top(btex $S$ etex, (0,-2.6cm));
			);
			thdraw tmp_pic scaled valscal rotatedaround(origin, -rot);
		enddef;
	endcode
endlayout northarrowMG
		